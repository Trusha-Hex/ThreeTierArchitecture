#pragma checksum "E:\Trusha\Training\ThreeTierApp\ThreeTierApp.Web\Views\Task\Index.cshtml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "a70d2023927b70394a0831d1bf82744bbdfc3a153015bd63ac453a017a3e0687"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCoreGeneratedDocument.Views_Task_Index), @"mvc.1.0.view", @"/Views/Task/Index.cshtml")]
namespace AspNetCoreGeneratedDocument
{
    #line default
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Threading.Tasks;
    using global::Microsoft.AspNetCore.Mvc;
    using global::Microsoft.AspNetCore.Mvc.Rendering;
    using global::Microsoft.AspNetCore.Mvc.ViewFeatures;
    #line default
    #line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"Sha256", @"a70d2023927b70394a0831d1bf82744bbdfc3a153015bd63ac453a017a3e0687", @"/Views/Task/Index.cshtml")]
    #nullable restore
    internal sealed class Views_Task_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    #nullable disable
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("ng-controller", new global::Microsoft.AspNetCore.Html.HtmlString("TaskController"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "E:\Trusha\Training\ThreeTierApp\ThreeTierApp.Web\Views\Task\Index.cshtml"
  
    Layout = "_Layout";

#line default
#line hidden
#nullable disable

            WriteLiteral("\r\n<!-- Task Management Page -->\r\n<!DOCTYPE html>\r\n<html lang=\"en\" ng-app=\"taskApp\">\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "a70d2023927b70394a0831d1bf82744bbdfc3a153015bd63ac453a017a3e06873547", async() => {
                WriteLiteral(@"
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Task Management</title>

    <!-- Bootstrap CSS -->
    <link href=""https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"" rel=""stylesheet"">

    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <script src=""https://code.jquery.com/jquery-3.5.1.slim.min.js""></script>

    <!-- Popper.js (necessary for Bootstrap) -->
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.1/umd/popper.min.js""></script>

    <!-- Bootstrap JavaScript -->
    <script src=""https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js""></script>

    <!-- AngularJS -->
    <script src=""https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular.min.js""></script>
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "a70d2023927b70394a0831d1bf82744bbdfc3a153015bd63ac453a017a3e06875397", async() => {
                WriteLiteral(@"
    <div class=""container mt-5"">
        <div class=""row"">
            <div class=""col-12"">
                <h2 class=""text-center"">Task Management</h2>
                <button ng-click=""openTaskModal()"" class=""btn btn-primary mb-3"">Add Task</button>
            </div>
        </div>

        <div class=""alert alert-success alert-dismissible fade show"" ng-if=""notification.message"" role=""alert"">
            {{notification.message}}
            <button type=""button"" class=""btn-close"" aria-label=""Close"" ng-click=""closeNotification()""></button>
        </div>

        <div class=""row"">
            <div class=""col-12"">
                <table class=""table table-striped table-bordered"">
                    <thead>
                        <tr>
                            <th>#</th>
                            <th>Task Name</th>
                            <th>Description</th>
                            <th>Assigned Employees</th>
                            <th>Deadline</th>
                ");
                WriteLiteral(@"            <th>Is Completed</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr ng-repeat=""task in tasks"">
                            <td>{{$index + 1}}</td>
                            <td>{{task.title}}</td>
                            <td>{{task.description}}</td>
                            <td>{{task.assignedEmployeeIds.join(', ')}}</td>
                            <td>{{task.dueDate | date:'yyyy-MM-dd'}}</td>
                            <td>{{task.isCompleted ? 'Yes' : 'No'}}</td>
                            <td>
                                <button ng-click=""openTaskModal(task)"" class=""btn btn-sm btn-warning"">Edit</button>
                                <button ng-click=""deleteTask(task.id)"" class=""btn btn-sm btn-danger"">Delete</button>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </");
                WriteLiteral(@"div>
        </div>
    </div>

    <!-- Task Modal -->
    <div id=""taskModal"" class=""modal"" tabindex=""-1"">
        <div class=""modal-dialog"">
            <div class=""modal-content"">
                <div class=""modal-header"">
                    <h5 class=""modal-title"">{{task.id ? 'Edit Task' : 'Add Task'}}</h5>
                    <button type=""button"" class=""btn-close"" ng-click=""closeTaskModal()"" aria-label=""Close""></button>
                </div>
                <div class=""modal-body"">
                    <form name=""taskForm"">
                        <input type=""hidden"" ng-model=""task.id"" />
                        <div class=""mb-3"">
                            <label for=""taskName"" class=""form-label"">Task Name</label>
                            <input type=""text"" class=""form-control"" ng-model=""task.title"" required />
                        </div>
                        <div class=""mb-3"">
                            <label for=""description"" class=""form-label"">Description</label>");
                WriteLiteral(@"
                            <textarea class=""form-control"" ng-model=""task.description"" rows=""3"" required></textarea>
                        </div>

                        <!-- Employee Selection Checkboxes -->
                        <div class=""mb-3"">
                            <label for=""assignedTo"" class=""form-label"">Assigned To</label>
                            <div ng-repeat=""employee in employees"">
                                <div class=""form-check"">
                                    <input type=""checkbox"" class=""form-check-input""
                                           ng-model=""employee.selected""
                                           ng-change=""updateAssignedEmployees()"" />
                                    <label class=""form-check-label"">{{employee.name}}</label>
                                </div>
                            </div>
                        </div>

                        <div class=""mb-3"">
                            <label for=""deadline"" cl");
                WriteLiteral(@"ass=""form-label"">Deadline</label>
                            <input type=""date"" class=""form-control"" ng-model=""task.dueDate"" required />
                        </div>
                        <div class=""mb-3"">
                            <label for=""status"" class=""form-label"">Status</label>
                            <select class=""form-select"" ng-model=""task.isCompleted"" required>
                                <option value=""false"">Pending</option>
                                <option value=""true"">Completed</option>
                            </select>
                        </div>
                    </form>
                </div>
                <div class=""modal-footer"">
                    <button type=""button"" class=""btn btn-secondary"" ng-click=""closeTaskModal()"">Close</button>
                    <button type=""button"" class=""btn btn-primary"" ng-click=""saveTask()"">Save</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        angula");
                WriteLiteral(@"r.module('taskApp', [])
            .controller('TaskController', function ($scope, $http, $timeout) {
                // Initialize task and notification models
                $scope.tasks = [];
                $scope.employees = [];
                $scope.notification = { message: '' };

                // Function to load all tasks
                $scope.loadTasks = function () {
                    $http.get('/tasks')  // Adjusted URL
                        .then(function (response) {
                            if (response.data.data) {
                                $scope.tasks = response.data.data;
                            }
                        });
                };

                // Function to load employees
                $scope.loadEmployees = function () {
                    $http.get('https://localhost:65391/employees') // Ensure this is the correct URL for employees
                        .then(function (response) {
                            $scope.employe");
                WriteLiteral(@"es = response.data;
                        });
                };

                // Show notifications
                $scope.showNotification = function (message) {
                    $scope.notification.message = message;
                    $timeout($scope.closeNotification, 5000);
                };

                // Close notifications
                $scope.closeNotification = function () {
                    $scope.notification.message = '';
                };

                // Open the modal for adding or editing a task
                $scope.openTaskModal = function (task) {
                    if (task) {
                        $scope.task = angular.copy(task);  // Copy the task for editing
                    } else {
                        $scope.task = { assignedEmployeeIds: [] };  // New task for adding
                    }

                    // Update the checkboxes based on the task's assigned employees
                    angular.forEach($scope.employees,");
                WriteLiteral(@" function (employee) {
                        employee.selected = $scope.task.assignedEmployeeIds.includes(employee.id);
                    });

                    // Open modal
                    $timeout(function () {
                        $('#taskModal').modal('show');
                    }, 0);
                };

                // Close the modal
                $scope.closeTaskModal = function () {
                    $('#taskModal').modal('hide');
                };

                // Save task (create or update)
                $scope.saveTask = function () {
                    const taskData = {
                        Title: $scope.task.title,
                        Description: $scope.task.description,
                        AssignedEmployeeIds: $scope.task.assignedEmployeeIds,
                        DueDate: new Date($scope.task.dueDate).toISOString().slice(0, 10),
                        IsCompleted: $scope.task.isCompleted === 'true' || $scope.task.isCompleted =");
                WriteLiteral(@"== true
                    };

                    let url = '';
                    let method = '';

                    if ($scope.task.id) {
                        url = '/tasks/' + $scope.task.id;
                        method = 'PUT';
                    } else {
                        url = '/tasks';
                        method = 'POST';
                    }

                    // Make HTTP request (POST or PUT)
                    $http({
                        method: method,
                        url: url,
                        data: taskData
                    })
                    .then(function (response) {
                        $scope.showNotification(response.data.notification);
                        $scope.loadTasks();
                        $scope.closeTaskModal();
                    });
                };

                // Delete a task
                $scope.deleteTask = function (taskId) {
                    if (confirm('Are you sure yo");
                WriteLiteral(@"u want to delete this task?')) {
                        $http.delete('/tasks/' + taskId)
                            .then(function (response) {
                                $scope.showNotification(response.data.notification);
                                $scope.loadTasks();
                            });
                    }
                };

                // Update the assigned employees when checkboxes change
                $scope.updateAssignedEmployees = function () {
                    $scope.task.assignedEmployeeIds = [];
                    angular.forEach($scope.employees, function (employee) {
                        if (employee.selected) {
                            $scope.task.assignedEmployeeIds.push(employee.id);
                        }
                    });
                };

                // Load tasks and employees
                $scope.loadTasks();
                $scope.loadEmployees();
            });
    </script>
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n</html>\r\n");
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591
