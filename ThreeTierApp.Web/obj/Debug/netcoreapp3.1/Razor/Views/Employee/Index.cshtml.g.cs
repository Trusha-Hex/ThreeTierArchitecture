#pragma checksum "E:\Trusha\Training\ThreeTierApp\ThreeTierApp.Web\Views\Employee\Index.cshtml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "4c34b6004730732682a239e29d9edec773039079e3ccce2d9488121b46bba25d"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCoreGeneratedDocument.Views_Employee_Index), @"mvc.1.0.view", @"/Views/Employee/Index.cshtml")]
namespace AspNetCoreGeneratedDocument
{
    #line default
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Threading.Tasks;
    using global::Microsoft.AspNetCore.Mvc;
    using global::Microsoft.AspNetCore.Mvc.Rendering;
    using global::Microsoft.AspNetCore.Mvc.ViewFeatures;
    #line default
    #line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"Sha256", @"4c34b6004730732682a239e29d9edec773039079e3ccce2d9488121b46bba25d", @"/Views/Employee/Index.cshtml")]
    #nullable restore
    internal sealed class Views_Employee_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    #nullable disable
    {
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "E:\Trusha\Training\ThreeTierApp\ThreeTierApp.Web\Views\Employee\Index.cshtml"
  
    Layout = "_Layout";

#line default
#line hidden
#nullable disable

            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "4c34b6004730732682a239e29d9edec773039079e3ccce2d9488121b46bba25d3116", async() => {
                WriteLiteral(@"
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <meta http-equiv=""X-UA-Compatible"" content=""IE=edge"">
    <title>Employee Management</title>
    <script src=""https://code.jquery.com/jquery-3.6.4.min.js""></script>
    <link rel=""stylesheet"" href=""https://cdn.datatables.net/1.13.4/css/jquery.dataTables.min.css"">
    <script src=""https://cdn.datatables.net/1.13.4/js/jquery.dataTables.min.js""></script>
    <link href=""https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css"" rel=""stylesheet"">
    <script src=""https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js""></script>
    <link rel=""stylesheet"" href=""https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css"" />
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 40px;
            background-color: #ffffff;
        }

        h1 {
            color: #CDC1FF;
            margin-bottom:");
                WriteLiteral(@" 10px;
            font-size: 36px;
            font-weight: bold;
        }

        h3 {
            color: #CDC1FF;
            margin-bottom: 20px;
            font-size: 26px;
            font-weight: bold;
        }

        button.btn-primary {
            margin-top: 40px;
        }


        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 50px;
        }

        table, th, td {
            border: 1px solid #ddd;
        }

        th, td {
            padding: 8px 12px;
            text-align: left;
        }

        th {
            background-color: #f1f1f1;
            color: #333;
            font-weight: bold;
            font-size: 16px;
        }

        td {
            font-size: 15px;
            color: #333;
        }

            td:nth-child(2), th:nth-child(2) {
                width: 15%;
            }

            td:nth-child(3), th:nth-child(3) {
                width: 20%;
        ");
                WriteLiteral(@"    }

            td:nth-child(4), th:nth-child(4) {
                width: 20%;
            }

            td:nth-child(5), th:nth-child(5) {
                width: 10%;
            }

            td:nth-child(8), th:nth-child(8) {
                width: 8%;
            }

            td:nth-child(9), th:nth-child(9) {
                width: 30%;
            }

        tr:nth-child(even) {
            background-color: #f9f9f9;
        }

        tr:hover {
            background-color: #FFCCEA;
        }

        .modal-content {
            background-color: #FFF6E3;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
            border: none;
        }

        .modal-header {
            background-color: #CDC1FF;
            color: #FFF6E3;
            padding: 20px;
            border-bottom: none;
            border-radius: 10px 10px 0 0;
        }

        .modal-footer {
            padding: 15");
                WriteLiteral(@"px;
            display: flex;
            justify-content: space-between;
            border-radius: 0 0 10px 10px;
            border-top: none;
        }

        .modal-title {
            font-size: 22px;
        }

        .form-control {
            border-radius: 8px;
            padding: 12px;
            border: 1px solid #ddd;
            margin-bottom: 15px;
            font-size: 16px;
        }

            .form-control:focus {
                border-color: #CDC1FF;
                box-shadow: 0 0 5px rgba(205, 193, 255, 0.5);
            }

        .form-control, .form-select {
            height: 38px;
            padding: 10px;
        }

        .btn {
            min-width: 40px;
            padding: 10px;
            font-size: 14px;
            border-radius: 5px;
        }

        .btn-light {
            background-color: #FFF6E3;
            border-color: #FFCCEA;
        }

            .btn-light:hover {
                background-color: #FF");
                WriteLiteral(@"CCEA;
                border-color: #CDC1FF;
            }

        .btn-primary {
            background-color: #CDC1FF;
            border-color: #CDC1FF;
            margin-bottom: 30px;
        }

            .btn-primary:hover {
                background-color: #B8A4FF;
                border-color: #B8A4FF;
            }

        .btn-square {
            width: 40px;
            height: 40px;
            padding: 0;
            font-size: 20px;
            text-align: center;
            line-height: 20px;
        }

        .btn-warning, .btn-danger {
            padding: 5px 10px;
            font-size: 16px;
        }

            .btn-warning i,
            .btn-danger i {
                font-size: 18px;
            }

        .modal-dialog {
            max-width: 800px;
        }

        .modal-body {
            max-height: 80vh;
            overflow-y: auto;
        }


        .modal-footer .btn {
            width: 45%;
            margin: 0 5p");
                WriteLiteral(@"x;
        }

        .alert-box {
            display: none;
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 9999;
            width: 300px;
        }



        .modal-footer .btn:hover {
            box-shadow: 0 0 8px rgba(0, 0, 0, 0.1);
        }

        .modal-footer .btn-primary,
        .modal-footer .btn-warning {
            width: auto;
            height: auto;
            padding: 10px 20px;
            font-size: 16px;
            border-radius: 5px;
        }

        td:last-child {
            text-align: center;
            vertical-align: middle;
        }

            td:last-child .action-buttons {
                display: flex;
                justify-content: center;
                gap: 10px;
            }

    </style>
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "4c34b6004730732682a239e29d9edec773039079e3ccce2d9488121b46bba25d10279", async() => {
                WriteLiteral(@"
    <h1>Employee Management</h1>

    <button type=""button"" class=""btn btn-primary"" data-bs-toggle=""modal"" data-bs-target=""#employeeModal"">
        Add New Employee
    </button>

    <div id=""alert-box"" style=""display: none;""></div>


    <h3>All Employees</h3>
    <table id=""employees-table"" class=""table table-striped"">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Username</th>
                <th>Email</th>
                <th>Department</th>
                <th>Salary</th>
                <th>Role</th>
                <th>Is Active</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
        </tbody>
    </table>

    <div class=""modal fade"" id=""tasksModal"" tabindex=""-1"" aria-labelledby=""tasksModalLabel"" aria-hidden=""true"">
    <div class=""modal-dialog modal-lg"">
        <div class=""modal-content"">
            <div class=""modal-header"">
                <h5 class=""modal-ti");
                WriteLiteral(@"tle"" id=""tasksModalLabel"">Assigned Tasks</h5>
                <button type=""button"" class=""btn-close"" data-bs-dismiss=""modal"" aria-label=""Close""></button>
            </div>
            <div class=""modal-body"">
                <ul id=""tasks-list""></ul>
            </div>
            <div class=""modal-footer"">
                <button type=""button"" class=""btn btn-secondary"" data-bs-dismiss=""modal"">Close</button>
            </div>
        </div>
    </div>
</div>


    <div class=""modal fade"" id=""employeeModal"" tabindex=""-1"" aria-labelledby=""employeeModalLabel"" aria-hidden=""true"">
        <div class=""modal-dialog modal-lg"">
            <div class=""modal-content"">
                <div class=""modal-header"">
                    <h5 class=""modal-title"" id=""employeeModalLabel"">Add / Update Employee</h5>
                    <button type=""button"" class=""btn-close"" data-bs-dismiss=""modal"" aria-label=""Close""></button>
                </div>
                <div id=""error-message"" style=""color: red; ");
                WriteLiteral(@"display: none;""></div>
                <div class=""modal-body"">
                    <input type=""hidden"" id=""employee-id"">
                    <div class=""form-group"">
                        <label for=""employee-name"">Name:</label>
                        <input type=""text"" id=""employee-name"" class=""form-control"">
                    </div>
                    <div class=""form-group"">
                        <label for=""employee-username"">Username:</label>
                        <input type=""text"" id=""employee-username"" class=""form-control"">
                    </div>
                    <div class=""row"">
                        <div class=""col-md-6"">
                            <div class=""form-group"">
                                <label for=""employee-email"">Email:</label>
                                <input type=""email"" id=""employee-email"" class=""form-control"">
                            </div>
                        </div>
                        <div class=""col-md-6"">
        ");
                WriteLiteral(@"                    <div class=""form-group"">
                                <label for=""employee-password"">Password:</label>
                                <input type=""password"" id=""employee-password"" class=""form-control"">
                            </div>
                        </div>
                    </div>
                    <div class=""row"">
                        <div class=""col-md-6"">
                            <div class=""form-group"">
                                <label for=""employee-department"">Department:</label>
                                <input type=""text"" id=""employee-department"" class=""form-control"">
                            </div>
                        </div>
                        <div class=""col-md-6"">
                            <div class=""form-group"">
                                <label for=""employee-salary"">Salary:</label>
                                <input type=""number"" id=""employee-salary"" class=""form-control"">
                            ");
                WriteLiteral(@"</div>
                        </div>
                    </div>

                    <div class=""form-group"">
                        <label for=""employee-role"">Role:</label>
                        <select id=""employee-role"" class=""form-select"">
                            <option value=""Admin"">Admin</option>
                            <option value=""Manager"">Manager</option>
                            <option value=""HR"">HR</option>
                            <option value=""Employee"">Employee</option>
                        </select>
                    </div>
                </div>
                <div class=""modal-footer"">
                    <button type=""button"" class=""btn btn-secondary"" data-bs-dismiss=""modal"">Close</button>
                    <div class=""ml-auto"">
                        <button type=""button"" id=""add-btn"" class=""btn btn-primary"">Add Employee</button>
                        <button type=""button"" id=""update-btn"" class=""btn btn-warning"" style=""display: none;"">Upda");
                WriteLiteral(@"te Employee</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        const apiBaseUrl = ""https://localhost:65391/employees"";

                 // Initialize DataTable once the page loads
        let employeesTable = $('#employees-table').DataTable();

        // Function to load employee data
        function loadEmployees() {
            $.get(apiBaseUrl, function(data) {
                employeesTable.clear(); // Clear the current DataTable rows

                // Add new rows from the fetched data
                data.forEach(employee => {
                    employeesTable.row.add([
                        employee.id,
                        employee.name,
                        employee.username,
                        employee.email,
                        employee.department,
                        employee.salary,
                        employee.role,
                        `<div class=""form-check ");
                WriteLiteral(@"form-switch"">
                            <input class=""form-check-input"" type=""checkbox"" id=""active-toggle-${employee.id}"" ${employee.isActive ? 'checked' : ''} onchange=""toggleActive(${employee.id}, this)"">
                        </div>`,
                        `<button class=""btn btn-warning"" onclick=""editEmployee(${employee.id})"">
                            <i class=""fas fa-edit""></i>
                        </button>
                        <button class=""btn btn-danger"" onclick=""deleteEmployee(${employee.id})"">
                            <i class=""fas fa-trash""></i>
                        </button>
                                <button class=""btn btn-primary btn-sm"" data-bs-toggle=""modal"" data-bs-target=""#tasksModal"" onclick=""setEmployeeIdForTasks(${employee.id})"">Tasks Assigned</button>
        `
                    ]).draw(false); // Draw the updated table
                });
            });
        }

                 // Toggle Is Active status
        function toggleActive(em");
                WriteLiteral(@"ployeeId, toggle) {
            const isActive = toggle.checked;

            $.ajax({
                url: `https://localhost:65391/update-status/${employeeId}?isActive=${isActive}`, // Update URL to include the query parameter
                method: 'PUT',
                contentType: 'application/json',  // You can omit the 'data' and 'contentType' as the parameter is in the URL now
                success: function(response) {
                    console.log(`Employee ${employeeId} is now ${isActive ? 'active' : 'inactive'}`);
                    showAlert('success', response.message || `Employee ${employeeId} status updated successfully.`);
                },
                error: function(error) {
                    console.error('Error updating employee status', error);
                    showAlert('danger', 'Failed to update employee status.');
                }
            });
        }


                // Show alert based on the response from the API
        function showAle");
                WriteLiteral(@"rt(type, message) {
            const alertBox = $('#alert-box');
            alertBox.removeClass(); // Clear all existing classes
            alertBox.addClass(`alert alert-${type} alert-dismissible fade show`); // Set proper classes
            alertBox.html(`
                <strong>${type === 'success' ? 'Success!' : 'Error!'}</strong> ${message}
                <button type=""button"" class=""btn-close"" data-bs-dismiss=""alert"" aria-label=""Close""></button>
            `);

            console.log(`Showing ${type} alert:`, message); // Log for debugging
            alertBox.fadeIn(); // Make sure this triggers visibility change

            // Automatically fade out after 3 seconds
            setTimeout(() => alertBox.fadeOut(), 3000);
        }


                $(""#add-btn"").click(function() {
            const name = $(""#employee-name"").val();
            const username = $(""#employee-username"").val();
            const email = $(""#employee-email"").val();
            const password =");
                WriteLiteral(@" $(""#employee-password"").val();
            const department = $(""#employee-department"").val();
            const salary = parseFloat($(""#employee-salary"").val());
            const role = $(""#employee-role"").val();

            let isValid = true;
            $("".error-message"").hide();

            if (!name || !username || !email || !password || !department || isNaN(salary) || salary <= 0) {
                console.log(""Validation failed: "", { name, username, email, password, department, salary });
                isValid = false;
                $(""#error-message"").text(""All fields are required and salary must be greater than 0."").show();
            }

            if (isValid) {
                const employee = {
                    name: name,
                    username: username,
                    email: email,
                    passwordHash: password, // Store the hashed password
                    department: department,
                    salary: salary,
               ");
                WriteLiteral(@"     role: role
                };

                $.ajax({
                    url: apiBaseUrl,
                    type: ""POST"",
                    data: JSON.stringify(employee),
                    contentType: ""application/json"",
                    success: function(response) {
                        loadEmployees(); // Refresh the table
                        clearForm();
                        $(""#employeeModal"").modal(""hide"");
                        showAlert('success', response.message || ""Employee added successfully!""); // Show success message from API response
                    },
                    error: function(xhr) {
                        const errorMessage = xhr.responseJSON?.message || ""Failed to add employee."";
                        showAlert('danger', errorMessage); // Show error message from API response
                    }
                });
            }
        });

        // Update employee
        $(""#update-btn"").click(function() {
         ");
                WriteLiteral(@"   const id = $(""#employee-id"").val();
            const name = $(""#employee-name"").val();
            const username = $(""#employee-username"").val();
            const email = $(""#employee-email"").val();
            const password = $(""#employee-password"").val();
            const department = $(""#employee-department"").val();
            const salary = parseFloat($(""#employee-salary"").val());
            const role = $(""#employee-role"").val();

            let isValid = true;
            $("".error-message"").hide();

            if (!name || !username || !email || !password || !department || isNaN(salary) || salary <= 0) {
                isValid = false;
                $(""#error-message"").text(""All fields are required and salary must be greater than 0."").show();
            }

            if (isValid) {
                const employee = {
                    id: parseInt(id),
                    name: name,
                    username: username,
                    email: email,
     ");
                WriteLiteral(@"               passwordHash: password, // Store the hashed password
                    department: department,
                    salary: salary,
                    role: role
                };

                $.ajax({
                    url: `${apiBaseUrl}/${id}`,
                    type: ""PUT"",
                    data: JSON.stringify(employee),
                    contentType: ""application/json"",
                    success: function() {
                        loadEmployees(); // Refresh the table
                        clearForm();
                        $(""#add-btn"").show();
                        $(""#update-btn"").hide();
                        $(""#employeeModal"").modal(""hide"");
                        showAlert('success', ""Employee updated successfully!""); // Success message for editing
                    },
                    error: function(xhr) {
                        const errorMessage = xhr.responseJSON?.message || ""Failed to update employee."";
                 ");
                WriteLiteral(@"       showAlert('danger', errorMessage); // Show error message for update
                    }
                });
            }
        });

        // Edit employee
        function editEmployee(id) {
            $.get(`${apiBaseUrl}/${id}`, function(employee) {
                $(""#employee-id"").val(employee.id);
                $(""#employee-name"").val(employee.name);
                $(""#employee-username"").val(employee.username);
                $(""#employee-email"").val(employee.email);
                $(""#employee-password"").val(""""); // Clear password field
                $(""#employee-department"").val(employee.department);
                $(""#employee-salary"").val(employee.salary);
                $(""#employee-role"").val(employee.role); // Set the role in the dropdown

                $(""#employeeModal"").modal(""show"");

                $(""#add-btn"").hide();
                $(""#update-btn"").show();
            });
        }

              // Delete employee
        function del");
                WriteLiteral(@"eteEmployee(id) {
            if (confirm(""Are you sure you want to delete this employee?"")) {
                $.ajax({
                    url: `${apiBaseUrl}/${id}`,
                    type: ""DELETE"",
                    success: function() {
                        loadEmployees(); // Refresh the table
                        showAlert('success', ""Employee deleted successfully!""); // Correct notification message
                    },
                    error: function(xhr) {
                        const errorMessage = xhr.responseJSON?.message || ""Failed to delete employee."";
                        showAlert('danger', errorMessage); // Show error message
                    }
                });
            }
        }

           function setEmployeeIdForTasks(employeeId) {
            console.log(""Employee ID being set:"", employeeId);
            // Store the employee ID in the modal's data attribute before opening it
            $('#tasksModal').data('employeeId', employeeId);
");
                WriteLiteral(@"        }




        // Fetch assigned tasks when modal is opened
        function fetchAssignedTasks(employeeId) {
            $.get(`https://localhost:65391/employees/${employeeId}/tasks`, function(tasks) {
                const tasksList = $('#tasks-list');
                tasksList.empty(); // Clear any previous task listings

                if (tasks && tasks.length > 0) {
                    tasks.forEach(task => {
                        tasksList.append(`<li>${task.title}</li>`); // Add each task's name to the list
                    });
                } else {
                    tasksList.append('<li>No tasks assigned.</li>');
                }
            });
        }

        $('#tasksModal').on('show.bs.modal', function () {
            const employeeId = $(this).data('employeeId');

            if (employeeId) {
                console.log(""Fetching tasks for Employee ID:"", employeeId); // Check if employeeId is found
                fetchAssignedTasks(employeeId);");
                WriteLiteral(@"  // Fetch tasks using employeeId
            } else {
                console.error('No employee ID found.');
            }
        });





        // Clear the form fields
        function clearForm() {
            $(""#employee-id"").val("""");
            $(""#employee-name"").val("""");
            $(""#employee-username"").val("""");
            $(""#employee-email"").val("""");
            $(""#employee-password"").val("""");
            $(""#employee-department"").val("""");
            $(""#employee-salary"").val("""");
            $(""#employee-role"").val(""Employee""); // Reset to default role
        }

        // Show success message
        function showSuccess(message) {
            $(""#alert-message"").text(message);
            $(""#alert-box"").removeClass(""alert-danger"").addClass(""alert-success"").show();
        }

        // Show error message
        function showError(message) {
            $(""#alert-message"").text(message);
            $(""#alert-box"").removeClass(""alert-success"").addClass");
                WriteLiteral("(\"alert-danger\").show();\r\n        }\r\n\r\n        $(document).ready(function() {\r\n            loadEmployees();\r\n        });\r\n    </script>\r\n\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591
