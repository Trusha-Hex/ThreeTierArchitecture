#pragma checksum "E:\Trusha\Training\ThreeTierApp\ThreeTierApp.Web\Views\Home\Index.cshtml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "159d93f7bf9c8748707efcc8b016155b1dcd2dd2c74435a5b9240d6a6d6759ee"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCoreGeneratedDocument.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
namespace AspNetCoreGeneratedDocument
{
    #line default
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Threading.Tasks;
    using global::Microsoft.AspNetCore.Mvc;
    using global::Microsoft.AspNetCore.Mvc.Rendering;
    using global::Microsoft.AspNetCore.Mvc.ViewFeatures;
    #line default
    #line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"Sha256", @"159d93f7bf9c8748707efcc8b016155b1dcd2dd2c74435a5b9240d6a6d6759ee", @"/Views/Home/Index.cshtml")]
    #nullable restore
    internal sealed class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    #nullable disable
    {
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "159d93f7bf9c8748707efcc8b016155b1dcd2dd2c74435a5b9240d6a6d6759ee2873", async() => {
                WriteLiteral(@"
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Employee Management</title>
    <script src=""https://code.jquery.com/jquery-3.6.4.min.js""></script>
    <link rel=""stylesheet"" href=""https://cdn.datatables.net/1.13.4/css/jquery.dataTables.min.css"">
    <script src=""https://cdn.datatables.net/1.13.4/js/jquery.dataTables.min.js""></script>
    <link href=""https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css"" rel=""stylesheet"">
    <script src=""https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js""></script>
    <link rel=""stylesheet"" href=""https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css"" />
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 40px;
            background-color: #ffffff;
        }

        h1 {
            color: #CDC1FF;
            margin-bottom: 10px; 
            font-size: 36px; 
            font-we");
                WriteLiteral(@"ight: bold;
        }

        h3 {
            color: #CDC1FF;
            margin-bottom: 20px; 
            font-size: 26px; 
            font-weight: bold;
        }

        button.btn-primary {
            margin-top: 40px; 
        }


        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 50px;
        }

        table, th, td {
            border: 1px solid #ddd;
        }

        th, td {
            padding: 8px 12px; 
            text-align: left;
        }

        th {
            background-color: #f1f1f1;
            color: #333;
            font-weight: bold;
            font-size: 16px;
        }

        td {
            font-size: 15px;
            color: #333;
        }

            /* Adjust column widths */
            td:nth-child(2), th:nth-child(2) {
                width: 25%;
            }

            td:nth-child(3), th:nth-child(3) {
                width: 25%;
            }

    ");
                WriteLiteral(@"        td:nth-child(4), th:nth-child(4) {
                width: 25%;
            }

            td:nth-child(5), th:nth-child(5) {
                width: 15%;
            }

        tr:nth-child(even) {
            background-color: #f9f9f9;
        }

        tr:hover {
            background-color: #FFCCEA;
        }

        .modal-content {
            background-color: #FFF6E3;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
            border: none; 
        }

        .modal-header {
            background-color: #CDC1FF;
            color: #FFF6E3;
            padding: 20px;
            border-bottom: none;
            border-radius: 10px 10px 0 0;
        }

        .modal-footer {
            padding: 15px;
            display: flex;
            justify-content: space-between;
            border-radius: 0 0 10px 10px;
            border-top: none; 
        }

        .modal-title {
         ");
                WriteLiteral(@"   font-size: 22px;
        }

        .form-control {
            border-radius: 8px;
            padding: 12px;
            border: 1px solid #ddd;
            margin-bottom: 15px;
            font-size: 16px;
        }

            .form-control:focus {
                border-color: #CDC1FF;
                box-shadow: 0 0 5px rgba(205, 193, 255, 0.5);
            }

        .btn {
            min-width: 40px;
            padding: 10px;
            font-size: 14px;
            border-radius: 5px;
        }

        .btn-light {
            background-color: #FFF6E3;
            border-color: #FFCCEA;
        }

            .btn-light:hover {
                background-color: #FFCCEA;
                border-color: #CDC1FF;
            }

        .btn-primary {
            background-color: #CDC1FF;
            border-color: #CDC1FF;
            margin-bottom: 30px;
        }

            .btn-primary:hover {
                background-color: #B8A4FF;
                ");
                WriteLiteral(@"border-color: #B8A4FF;
            }

        .btn-square {
            width: 40px;
            height: 40px;
            padding: 0;
            font-size: 20px;
            text-align: center;
            line-height: 20px;
        }

        .btn-warning, .btn-danger {
            padding: 5px 10px;
            font-size: 16px;
        }

            .btn-warning i,
            .btn-danger i {
                font-size: 18px;
            }

        .modal-dialog {
            max-width: 500px;
            margin: 30px auto;
        }

        .modal-footer .btn {
            width: 45%;
            margin: 0 5px;
        }

        .alert-box {
            display: none; 
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 9999;
            width: 300px;
        }


        .modal-footer .btn:hover {
            box-shadow: 0 0 8px rgba(0, 0, 0, 0.1);
        }

        .modal-footer .btn-primary,
        .modal-f");
                WriteLiteral(@"ooter .btn-warning {
            width: auto; 
            height: auto; 
            padding: 10px 20px; 
            font-size: 16px; 
            border-radius: 5px; 
        }


        td:last-child {
            text-align: center;
            vertical-align: middle;
        }

            td:last-child .action-buttons {
                display: flex;
                justify-content: center;
                gap: 10px; 
            }


    </style>
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "159d93f7bf9c8748707efcc8b016155b1dcd2dd2c74435a5b9240d6a6d6759ee9668", async() => {
                WriteLiteral(@"
    <h1>Employee Management</h1>

    <button type=""button"" class=""btn btn-primary"" data-bs-toggle=""modal"" data-bs-target=""#employeeModal"">
        Add New Employee
    </button>

    <div id=""alert-box"" class=""alert alert-success alert-dismissible fade show"" role=""alert"" style=""display: none;"">
        <strong>Success!</strong> <span id=""alert-message""></span>
        <button type=""button"" class=""btn-close"" data-bs-dismiss=""alert"" aria-label=""Close""></button>
    </div>



    <h3>All Employees</h3>
    <table id=""employees-table"" class=""table table-striped"">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Department</th>
                <th>Salary</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>${employee.id}</td>
                <td>${employee.name}</td>
                <td>${employee.department}</td>
                <td>${employee.salar");
                WriteLiteral(@"y}</td>
                <td>
                    <div class=""action-buttons"">
                        <button class=""btn btn-warning"" onclick=""editEmployee(${employee.id})"">
                            <i class=""fas fa-edit""></i>
                        </button>
                        <button class=""btn btn-danger"" onclick=""deleteEmployee(${employee.id})"">
                            <i class=""fas fa-trash""></i>
                        </button>
                    </div>
                </td>
            </tr>
        </tbody>
    </table>

    <div class=""modal fade"" id=""employeeModal"" tabindex=""-1"" aria-labelledby=""employeeModalLabel"" aria-hidden=""true"">
       
        <div class=""modal-dialog"">
            <div class=""modal-content"">
                <div class=""modal-header"">
                    <h5 class=""modal-title"" id=""employeeModalLabel"">Add / Update Employee</h5>
                    <button type=""button"" class=""btn-close"" data-bs-dismiss=""modal"" aria-label=""Close""></button>
");
                WriteLiteral(@"                </div>
                <div id=""error-message"" style=""color: red; display: none;""></div>
                <!-- Display Error Message -->
                <div id=""error-message"" style=""color: red; display: none; font-weight: bold;""></div>
                <div class=""modal-body"">
                    <input type=""hidden"" id=""employee-id"">
                    <div class=""form-group"">
                        <label for=""employee-name"">Name:</label>
                        <input type=""text"" id=""employee-name"" class=""form-control"">
                        <div id=""error-name"" class=""error-message"" style=""color: red; display: none;""></div>
                    </div>
                    <div class=""form-group"">
                        <label for=""employee-department"">Department:</label>
                        <input type=""text"" id=""employee-department"" class=""form-control"">
                        <div id=""error-department"" class=""error-message"" style=""color: red; display: none;""></div>");
                WriteLiteral(@"
                    </div>
                    <div class=""form-group"">
                        <label for=""employee-salary"">Salary:</label>
                        <input type=""number"" id=""employee-salary"" class=""form-control"">
                        <div id=""error-salary"" class=""error-message"" style=""color: red; display: none;""></div>
                    </div>

                </div>
                <div class=""modal-footer"">
                    <button type=""button"" class=""btn btn-secondary"" data-bs-dismiss=""modal"">Close</button>
                    <div class=""ml-auto"">
                        <button type=""button"" id=""add-btn"" class=""btn btn-primary"">Add Employee</button>
                        <button type=""button"" id=""update-btn"" class=""btn btn-warning"" style=""display: none;"">Update Employee</button>
                    </div>
                </div>
            </div>
        </div>
    </div>



    <script>
        const apiBaseUrl = ""https://localhost:65391/employees"";

 ");
                WriteLiteral(@"       function loadEmployees() {
            $.get(apiBaseUrl, function(data) {
                const tbody = $(""#employees-table tbody"");
                tbody.empty();

                data.forEach(employee => {
                    tbody.append(`
                        <tr>
                            <td>${employee.id}</td>
                            <td>${employee.name}</td>
                            <td>${employee.department}</td>
                            <td>${employee.salary}</td>
                            <td>
                                <button class=""btn btn-warning"" onclick=""editEmployee(${employee.id})"">
                                    <i class=""fas fa-edit""></i>
                                </button>
                                <button class=""btn btn-danger"" onclick=""deleteEmployee(${employee.id})"">
                                    <i class=""fas fa-trash""></i>
                                </button>
                            </td>
              ");
                WriteLiteral(@"          </tr>
                    `);
                });

                $('#employees-table').DataTable();
            });
        }

            $(""#add-btn"").click(function() {
            const name = $(""#employee-name"").val();
            const department = $(""#employee-department"").val();
            const salary = parseFloat($(""#employee-salary"").val());

            let isValid = true;

            $("".error-message"").hide();

            if (!name) {
                isValid = false;
                $(""#error-name"").text(""Name is required."").show();
            }

            if (!department) {
                isValid = false;
                $(""#error-department"").text(""Department is required."").show();
            }

            if (isNaN(salary) || salary <= 0) {
                isValid = false;
                $(""#error-salary"").text(""Salary must be greater than 0."").show();
            }

            if (isValid) {
                const employee = {
         ");
                WriteLiteral(@"           name: name,
                    department: department,
                    salary: salary
                };

                $.ajax({
                    url: apiBaseUrl,
                    type: ""POST"",
                    data: JSON.stringify(employee),
                    contentType: ""application/json"",
                    success: function() {
                        loadEmployees(); 
                        clearForm();
                        $(""#employeeModal"").modal(""hide"");
                        showSuccess(""Employee added successfully!"");
                    },
                    error: function(xhr) {
                        const errorMessage = xhr.responseJSON?.message || ""Failed to add employee."";
                        showError(errorMessage);  
                    }
                });
            }
        });


            $(""#update-btn"").click(function() {
            const id = $(""#employee-id"").val();
            const name = $(""#employee-nam");
                WriteLiteral(@"e"").val();
            const department = $(""#employee-department"").val();
            const salary = parseFloat($(""#employee-salary"").val());

            let isValid = true;

            $("".error-message"").hide();

            if (!name) {
                isValid = false;
                $(""#error-name"").text(""Name is required."").show();
            }

            if (!department) {
                isValid = false;
                $(""#error-department"").text(""Department is required."").show();
            }

            if (isNaN(salary) || salary <= 0) {
                isValid = false;
                $(""#error-salary"").text(""Salary must be greater than 0."").show();
            }

            if (isValid) {
                const employee = {
                    id: parseInt(id),
                    name: name,
                    department: department,
                    salary: salary
                };

                    $.ajax({
                        url: `${apiBas");
                WriteLiteral(@"eUrl}/${id}`,
                        type: ""PUT"",
                        data: JSON.stringify(employee),
                        contentType: ""application/json"",
                        success: function() {
                            loadEmployees(); 
                            clearForm();
                            $(""#add-btn"").show(); 
                            $(""#update-btn"").hide(); 
                            $(""#employeeModal"").modal(""hide"");
                            showSuccess(""Employee updated successfully!""); 
                        },
                        error: function(xhr) {
                            const errorMessage = xhr.responseJSON?.message || ""Failed to update employee."";
                            showError(errorMessage); 
                        }
                    });
            }
        });


        function editEmployee(id) {
            $.get(`${apiBaseUrl}/${id}`, function(employee) {
                $(""#employee-id"").val(employee.i");
                WriteLiteral(@"d);
                $(""#employee-name"").val(employee.name);
                $(""#employee-department"").val(employee.department);
                $(""#employee-salary"").val(employee.salary);

                $(""#employeeModal"").modal(""show"");

                $(""#add-btn"").hide();
                $(""#update-btn"").show();
            });
        }

        function deleteEmployee(id) {
            if (confirm(""Are you sure you want to delete this employee?"")) {
                $.ajax({
                    url: `${apiBaseUrl}/${id}`,
                    type: ""DELETE"",
                    success: function() {
                        loadEmployees(); 
                        showSuccess(""Employee deleted successfully!"");
                    },
                    error: function(xhr) {
                        const errorMessage = xhr.responseJSON?.message || ""Failed to delete employee."";
                        showError(errorMessage); 
                    }
                });
          ");
                WriteLiteral(@"  }
        }


        function showSuccess(message) {
            $(""#alert-message"").text(message); 
            $(""#alert-box"").show();  
            setTimeout(function() {
                $(""#alert-box"").fadeOut();  
            }, 5000);
        }


        function showError(message) {
            $(""#error-message"").text(message).show();
        }



        function clearForm() {
            $(""#employee-id"").val("""");
            $(""#employee-name"").val("""");
            $(""#employee-department"").val("""");
            $(""#employee-salary"").val("""");
        }


        $(document).ready(function() {
            loadEmployees();
        });
    </script>
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591
